Databases are implementation details. Considering the database should be deferred as 
long as possible. Far too many applications are inextricably tied to their databases 
because they were designed with the database in mind from the beginning. 
Remember the definition of abstraction: the amplification of the essential and the 
elimination of the irrelevant. The database is irrelevant at this stage of the project; 
it is merely a technique used for storing and accessing data, nothing more.

- Start with a quick design session

- Analysis by Use Cases

  Instead of starting with the data of the system, let's start by considering the behavior 
  of the system. After all, it is the system's behavior that we are being paid to create.

  One way to capture and analyze the behavior of a system is to create use cases. Use cases, 
  as originally described by Jacobson, are very similar to the notion of user stories in XP. 
  A use case is like a user story that has been elaborated with a little more detail. 
  Such elaboration is appropriate once the user story has been selected for implementation 
  in the current iteration. When we perform use case analysis, we look to the user stories 
  and acceptance tests to find out the kinds of stimuli that the users of this system provide. 
  Then we try to figure out how the system responds to those stimuli.
  For example, here are the user stories that our customer has chosen for the next iteration:
  1. Add a new employee
  2. Delete an employee
  3. Post a time card
  4. Post a sales receipt
  5. Post a union service charge
  6. Change employee details (e.g., hourly rate, dues rate.)
  7. Run the payroll for today

  A simple use case analysis can provide a wealth of information and insights into the 
  design of a system.

At the beginning of an iteration it is not uncommon to see the team assemble in front of a 
whiteboard and reason together about the design for the user stories that were selected 
for that iteration. Such a quick design session typically lasts less than an hour. 
The resulting UML diagrams, if any, may be left on the whiteboard, or erased. They
are usually not commited to paper. The purpose of the session is to start the thinking process, 
and give the developers a common mental model to work from. The goal is not to nail down 
the design.
This chapter has been the textual equivalent to such a quick design Session.