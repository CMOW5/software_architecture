/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package payroll_app;

import org.junit.Test;

import payroll_app.affiliations.UnionAffiliation;
import payroll_app.db.PayRollDatabase;
import payroll_app.models.Employee;
import payroll_app.models.ServiceCharge;
import payroll_app.payment.PayCheck;
import payroll_app.payment.classification.HourlyClassification;
import payroll_app.payment.classification.PaymentClassification;
import payroll_app.payment.classification.SalariedClassification;
import payroll_app.payment.classification.TimeCard;
import payroll_app.payment.method.HoldMethod;
import payroll_app.payment.schedule.MonthlySchedule;
import payroll_app.transactions.AddHourlyEmployee;
import payroll_app.transactions.AddSalariedEmployee;
import payroll_app.transactions.DeleteEmployeeTransaction;
import payroll_app.transactions.PayDayTransaction;
import payroll_app.transactions.ServiceChargeTransaction;
import payroll_app.transactions.TimeCardTransaction;

import static org.junit.Assert.*;

import java.time.LocalDateTime;

public class PayrollTest {
	@Test
	public void testAddSalariedEmployee() {
		int empld = 1;
		AddSalariedEmployee t = new AddSalariedEmployee(empld, "Bob", "Home", 1000.00);
		t.execute();
		Employee e = PayRollDatabase.getInstance().getEmployee(empld);
		
		assertEquals("Bob", e.getName());

		SalariedClassification sc = (SalariedClassification) e.getClassification();
		assertEquals(1000.00, sc.getSalary(), .001);

		MonthlySchedule ms = (MonthlySchedule) e.getSchedule();
		assertNotNull(ms);

		HoldMethod hm = (HoldMethod) e.getMethod();
		assertNotNull(hm);
	}

	@Test
	public void testTestDeleteEmployee() {
		int empld = 3;
		AddSalariedEmployee t = new AddSalariedEmployee(empld, "Lance", "Home", 2000.00);
		t.execute();
		Employee e = PayRollDatabase.getInstance().getEmployee(empld);
		assertNotNull(e);

		DeleteEmployeeTransaction dt = new DeleteEmployeeTransaction(empld);
		dt.execute();

		e = PayRollDatabase.getInstance().getEmployee(empld);
		assertNull(e);
	}

	@Test
	public void testTimeCardTransaction() {
		int empld = 2;
		AddHourlyEmployee t = new AddHourlyEmployee(empld, "Bill", "Home", 15.25);
		t.execute();

		TimeCardTransaction tct = new TimeCardTransaction(20011031, 8.0, empld);
		tct.execute();

		Employee e = PayRollDatabase.getInstance().getEmployee(empld);
		assertNotNull(e);

		PaymentClassification pc = e.getClassification();
		HourlyClassification hc = (HourlyClassification) pc;
		assertNotNull(e);

		TimeCard tc = hc.getTimeCard(20011031);
		assertNotNull(tc);
		assertEquals(8.0, tc.getHours(), 0.001);
	}
	
	@Test
	public void testAddServiceCharge() {
		int empld = 2;
		AddHourlyEmployee t = new AddHourlyEmployee(empld, "Bill", "Home", 15.25);
		t.execute();

		Employee e = PayRollDatabase.getInstance().getEmployee(empld);
		assertNotNull(e);
		
		UnionAffiliation af = new UnionAffiliation(12.5);
		e.setAffiliation(af);
		
		int memberld = 86; // Maxwell Smart
		PayRollDatabase.getInstance().addUnionMember(memberld, e);
		
		ServiceChargeTransaction set = 
				new ServiceChargeTransaction(memberld, 20011101, 12.95);
		set.execute();
		
		ServiceCharge sc = af.getServiceCharge(20011101);
		assertNotNull(af);
		assertEquals(12.95, sc.getAmount(), .001);
	}
	
	@Test
	public void testPaySingleSalariedEmployee() {
		int empld = 1;
		AddSalariedEmployee t = new AddSalariedEmployee(empld, "Bob", "Home", 1000.00);
		t.execute();

		Employee e = PayRollDatabase.getInstance().getEmployee(empld);
		UnionAffiliation af = new UnionAffiliation(12.5);
		e.setAffiliation(af);
		
		LocalDateTime payDate =  LocalDateTime.of(2011,11,30,0,0,0);
		PayDayTransaction pt = new PayDayTransaction(payDate);
		pt.execute();
		
		PayCheck payCheck = pt.getPaycheck(empld);
		assertNotNull(payCheck);
		assertTrue(payCheck.getPayDate() == payDate);
		assertEquals(1000.00, payCheck.getGrossPay() , .001) ;
		// assertEquals("Hold", payCheck.getField("Disposition"));
		assertEquals(0.0, payCheck.getDeductions(), .001);
		assertEquals(1000.00, payCheck.getNetPay() , .001) ;
	}
	
	@Test
	public void TestPaySingleSalariedEmployeeOnWrongDate()
	{
		int empld = 1;
		AddSalariedEmployee t = new AddSalariedEmployee(empld, "Bob", "Home", 1000.00);
		t.execute();
		LocalDateTime payDate = LocalDateTime.of(2001, 11, 29, 0, 0 ,0);
		PayDayTransaction pt = new PayDayTransaction(payDate);
		pt.execute();
		PayCheck pc = pt.getPaycheck(empld);
		assertNull(pc);
	}
}
