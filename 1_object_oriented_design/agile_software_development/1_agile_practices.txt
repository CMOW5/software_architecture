* Individuals and interactions over processes and tools:

  A good process will not save the project from failure if the team doesn't have strong players, but a bad 
  process can make even the strongest of players ineffective. Even a group of strong players can fail badly if they don't
  work as a team.

  Working well with others, communicating and interacting, is more 
  important than raw programming talent. A team of average programmers who communicate 
  well are more likely to succeed than a group of superstars who fail to interact as a team.

  An overabundance of big, unwieldy tools is just as bad as a lack of tools. so start
  small.
  (Compilers, IDEs, source-code control systems, etc)

  My advice is to start small. Don't assume you've outgrown a tool until you've tried it 
  and found you can't use it. Instead of buying the top-of-the-line, megaexpensive, 
  source-code control system, find a free one and use it

  until you can demonstrate that you've outgrown it. Before you buy team licenses for the 
  best of all CASE tools, use white boards and graph paper until you can reasonably show 
  that you need more. Before you commit to the top-shelf behemoth database system, 
  try flat files. Don't assume that bigger and better tools will automatically help 
  you do better. Often they hinder more than they help.

  Remember, building the team is more important than building the environment. 
  Many teams and managers make the mistake of building the environment first and 
  expecting the team to gel automatically. Instead, work to create the team, 
  and then let the team configure the environment on the basis of need.

* Working software over comprehensive documentation
* Customer collaboration over contract negotiation
* Responding to change over following a plan