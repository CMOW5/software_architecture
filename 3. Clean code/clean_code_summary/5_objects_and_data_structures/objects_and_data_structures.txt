Chapter 6. Objects and data structures


1. Data abstraction


  Hiding implementation is not just a matter of putting a layer of functions between the variables. 
  Hiding implementation is about abstractions! A class does not simply push its variables out through getters and setters. 
  Rather it exposes abstract interfaces that allow its users to manipulate the essence of the data, 
  without having to know its implementation.

  We do not want to expose the details of our data. Rather we want to express our data in abstract terms. This is not
  merely accomplished by using interfaces and/or getters and setters. Serious thought needs to be put into the best way 
  to represent the data that an object contains. The worst option is to blithely add getters and setters.



2. Data/Object Anti-Symmetry

  Objects hide their data behind abstractions and expose functions that operate on that data. Data structure expose their 
  data and have no meaningful functions.  
    
    
  Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. 
  OO code, on the other hand, makes it easy to add new classes without changing existing functions.

  Procedural code makes it hard to add new data structures because all the functions must change. 
  OO code makes it hard to add new functions because all the classes must change.

  In any complex system there are going to be times when we want to add new data types rather than new functions. 
  For these cases objects and OO are most appropriate. On the other hand, there will also be times when we’ll want to 
  add new functions as opposed to data types. In that case procedural code and data structures will be more appropriate.
  Mature programmers know that the idea that everything is an object is a myth. Sometimes you really do want simple data 
  structures with procedures operating on them.



3. The law of medeter

  module should not know about the innards of the objects it manipulates. This means that an object should not expose its
  internal structure through accessors because to do so is to expose, rather than to hide, its
  internal structure.

  he Law of Demeter says that a method f of a class C should only call
  the methods of these:

  • C
  • An object created by f
  • An object passed as an argument to f
  • An object held in an instance variable of C

  The method should not invoke methods on objects that are returned by any of the
  allowed functions. In other words, talk to friends, not to strangers.

  bad code => 

    final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();

  Chains of calls like this are generally considered to be sloppy style and should be
  avoided.

  Split them up as follows doesn't help neither =>

    Options opts = ctxt.getOptions();
    File scratchDir = opts.getScratchDir();
    final String outputDir = scratchDir.getAbsolutePath();


  Whether this is a violation of Demeter depends on whether or not ctxt , Options , and
  ScratchDir are objects or data structures. If they are objects, then their internal structure
  should be hidden rather than exposed, and so knowledge of their innards is a clear viola-
  tion of the Law of Demeter. On the other hand, if ctxt , Options , and ScratchDir are just
  data structures with no behavior, then they naturally expose their internal structure, and so
  Demeter does not apply.


 - Hybrids

  This confusion sometimes leads to unfortunate hybrid structures that are half object and
  half data structure. They have functions that do significant things, and they also have either
  public variables or public accessors and mutators that, for all intents and purposes, make
  the private variables public, tempting other external functions to use those variables the
  way a procedural program would use a data structure. 4
  Such hybrids make it hard to add new functions but also make it hard to add new data
  structures. They are the worst of both worlds. Avoid creating them. They are indicative of a
  muddled design whose authors are unsure of—or worse, ignorant of—whether they need
  protection from functions or types.


 - Hiding structure

  If ctxt is an object, we should be telling it to do something; we should not be asking it
  about its internals.

  outPutDir was suppose to be used like this =>

    String outFile = outputDir + "/" + className.replace('.', '/') + ".class";
    FileOutputStream fout = new FileOutputStream(outFile);
    BufferedOutputStream bos = new BufferedOutputStream(fout); 


  we see that the intent of getting the absolute path of the scratch directory was to create 
  a scratch file of a given name.

  So, what if we told the ctxt object to do this? =>

    BufferedOutputStream bos = ctxt.createScratchFileStream(classFileName); 

  This allows ctxt to hide its internals and prevents the current function from having to violate 
  the Law of Demeter by navigating through objects it shouldn’t know about.



4. Data transfer Objects

  
  The quintessential form of a data structure is a class with public variables and no func-
  tions. This is sometimes called a data transfer object, or DTO. DTOs are very useful struc-
  tures, especially when communicating with databases or parsing messages from sockets,
  and so on. They often become the first in a series of translation stages that convert raw data
  in a database into objects in the application code.



5. Active record

  Active Records are special forms of DTOs. They are data structures with public (or beanaccessed) variables; 
  but they typically have navigational methods like save and find . Typically these Active Records are direct 
  translations from database tables, or other data sources. 

  Unfortunately we often find that developers try to treat these data structures as though
  they were objects by putting business rule methods in them. This is awkward because it
  creates a hybrid between a data structure and an object.
  The solution, of course, is to treat the Active Record as a data structure and to create
  separate objects that contain the business rules and that hide their internal data (which are
  probably just instances of the Active Record).


6. Conclusion

  Objects expose behavior and hide data. This makes it easy to add new kinds of objects
  without changing existing behaviors. It also makes it hard to add new behaviors to existing
  objects. Data structures expose data and have no significant behavior. This makes it easy to
  add new behaviors to existing data structures but makes it hard to add new data structures
  to existing functions.
  In any given system we will sometimes want the flexibility to add new data types, and
  so we prefer objects for that part of the system. Other times we will want the flexibility to
  add new behaviors, and so in that part of the system we prefer data types and procedures.
  Good software developers understand these issues without prejudice and choose the
  approach that is best for the job at hand.
