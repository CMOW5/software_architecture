Chapter 12. Emergence


A design is “simple” if it follows these rules:

  - Runs all the tests
  - Contains no duplication
  - Expresses the intent of the programmer
  - Minimizes the number of classes and methods


1. Run all the tests

  A system might have a perfect design on paper, but if there is no simple way to verify that the 
  system actually works as intended, then all the paper effort is questionable

  Systems that aren’t testable aren’t verifiable. Arguably, a system that cannot be verified 
  should never be deployed.

  Fortunately, making our systems testable pushes us toward a design where our classes
  are small and single purpose. It’s just easier to test classes that conform to the SRP. The
  more tests we write, the more we’ll continue to push toward things that are simpler to test.
  So making sure our system is fully testable helps us create better designs.

  Tight coupling makes it difficult to write tests. So, similarly, the more tests we write,
  the more we use principles like DIP and tools like dependency injection, interfaces, and
  abstraction to minimize coupling. Our designs improve even more.

  Writing tests leads to better designs.


2. Refactoring


  For each few lines of code we add, we pause and reflect on the new design. Did we just degrade it? 
  If so, we clean it up and run our tests to demonstrate that we haven’t broken anything. 
  The fact that we have these tests eliminates the fear that cleaning up the code will break it!

  We can increase cohesion, decrease coupling, separate con-
  cerns, modularize system concerns, shrink our functions and classes, choose better names,
  and so on. This is also where we apply the final three rules of simple design: Eliminate
  duplication, ensure expressiveness, and minimize the number of classes and methods.


3. No Duplication

  Duplication is the primary enemy of a well-designed system. It represents additional
  work, additional risk, and additional unnecessary complexity. Duplication manifests
  itself in many forms. Lines of code that look exactly alike are, of course, duplication.
  Lines of code that are similar can often be massaged to look even more alike so that
  they can be more easily refactored. And duplication can exist in other forms such as
  duplication of implementation

  Creating a clean system requires the will to eliminate duplication, even in just a few
  lines of code

  “reuse in the small” can cause system complexity to shrink dramatically. 
  Understanding how to achieve reuse in the small is essential to achieving reuse in the large.

  The TEMPLATE METHOD pattern is a common technique for removing higher-level
  duplication.

    example => 

      public class VacationPolicy {
        public void accrueUSDivisionVacation() {
          // code to calculate vacation based on hours worked to date
          // code to ensure vacation meets US minimums
          // code to apply vaction to payroll record
        }
        public void accrueEUDivisionVacation()
          // code to calculate vacation based on hours worked to date
          // code to ensure vacation meets EU minimums
          // code to apply vaction to payroll record
        }
      }

    The code across accrueUSDivisionVacation and accrueEuropeanDivisionVacation is largely
    the same, with the exception of calculating legal minimums. That bit of the algorithm
    changes based on the employee type.
    We can eliminate the obvious duplication by applying the TEMPLATE METHOD pattern.

    abstract public class VacationPolicy {
      public void accrueVacation() {
        calculateBaseVacationHours();
        alterForLegalMinimums();
        applyToPayroll();
      }

      private void calculateBaseVacationHours() { /* ... */ };
      abstract protected void alterForLegalMinimums();
      private void applyToPayroll() { /* ... */ };
    }

  The subclasses fill in the “hole” in the accrueVacation algorithm, supplying the only bits of
  information that are not duplicated.


4. Expressive


  It’s easy to write code that we understand, because at the time we write it we’re deep in an 
  understanding of the problem we’re trying to solve. Other maintainers of the code aren’t going 
  to have so deep an understanding. 

  The majority of the cost of a software project is in long-term maintenance. In order to
  minimize the potential for defects as we introduce change, it’s critical for us to be able to
  understand what a system does.

  code should clearly express the intent of its author

  The clearer the author can make the code, the less time others will have to spend understanding it. 
  This will reduce defects and shrink the cost of maintenance.

  You can express yourself by choosing good names. We want to be able to hear a class
  or function name and not be surprised when we discover its responsibilities.
  You can also express yourself by keeping your functions and classes small. Small
  classes and functions are usually easy to name, easy to write, and easy to understand.

  You can also express yourself by using standard nomenclature. Design patterns, for
  example, are largely about communication and expressiveness. By using the standard
  pattern names, such as C OMMAND or V ISITOR , in the names of the classes that imple-
  ment those patterns, you can succinctly describe your design to other developers.

  Well-written unit tests are also expressive. A primary goal of tests is to act as documentation 
  by example. Someone reading our tests should be able to get a quick understanding of what a class is all about.

  But the most important way to be expressive is to try. All too often we get our code
  working and then move on to the next problem without giving sufficient thought to making
  that code easy for the next person to read. Remember, the most likely next person to read
  the code will be you.


5. Minimal Classes and methods

  Even concepts as fundamental as elimination of duplication, code expressiveness, and the
  SRP can be taken too far. In an effort to make our classes and methods small, we might
  create too many tiny classes and methods. So this rule suggests that we also keep our func-
  tion and class counts low.

  High class and method counts are sometimes the result of pointless dogmatism. Con-
  sider, for example, a coding standard that insists on creating an interface for each and
  every class. Or consider developers who insist that fields and behavior must always be sep-
  arated into data classes and behavior classes. Such dogma should be resisted and a more
  pragmatic approach adopted.

  Our goal is to keep our overall system small while we are also keeping our functions
  and classes small. Remember, however, that this rule is the lowest priority of the four rules
  of Simple Design. So, although it’s important to keep class and function count low, it’s
  more important to have tests, eliminate duplication, and express yourself.
  
